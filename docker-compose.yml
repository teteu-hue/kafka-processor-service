services:
    zookeeper:
        image: confluentinc/cp-zookeeper:7.5.0
        container_name: zookeeper
        environment:
          ZOOKEEPER_CLIENT_PORT: 2181
          ZOOKEEPER_CLIENT_TIME: 2000
        ports:
          - "2181:2181"
        networks:
          - kafka-network

    kafka:
      image: confluentinc/cp-kafka:7.5.0
      container_name: kafka
      depends_on:
        - zookeeper
      ports:
        - "9092:9092"
        - "29092:29092"
      environment:
        KAFKA_BROKER_ID: 1
        KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
        KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
        KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
        KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
        KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
        KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
        KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1

      networks:
      - kafka-network
    mongodb:
      build:
        context: .
        dockerfile: Dockerfile.mongosh
      container_name: mongodb
      ports:
        - "27017:27017"
      volumes:
        - mongodb_data:/data/db
      networks:
        - kafka-network

    app:

      build: .
      container_name: app
      volumes: 
        - .:/usr/src/app
        - /usr/src/app/node_modules
      command: yarn dev
      ports:
        - "3000:3000"
      depends_on:
        - kafka
        - mongodb
      networks:
      - kafka-network

    postgresql:
      image: postgres:14
      container_name: conduktor-postgres
      environment:
        PGDATA: "/var/lib/postgresql/data"
        POSTGRES_DB: "conduktor-console"
        POSTGRES_USER: "conduktor"
        POSTGRES_PASSWORD: "change_me"
        POSTGRES_HOST_AUTH_METHOD: "scram-sha-256"
      volumes:
        - pg_data:/var/lib/postgresql/data
      healthcheck:
        test: ["CMD-SHELL", "pg_isready"]
        interval: 10s
        timeout: 5s
        retries: 5
      networks:
        - kafka-network

  # Banco SQL para consultas do Conduktor
    postgresql-2:
      image: postgres:14
      container_name: conduktor-sql
      environment:
        PGDATA: "/var/lib/postgresql/data"
        POSTGRES_DB: "conduktor-sql"
        POSTGRES_USER: "conduktor"
        POSTGRES_PASSWORD: "change_me"
        POSTGRES_HOST_AUTH_METHOD: "scram-sha-256"
      volumes:
        - pg_data_sql:/var/lib/postgresql/data
      healthcheck:
        test: ["CMD-SHELL", "pg_isready"]
        interval: 10s
        timeout: 5s
        retries: 5
      networks:
        - kafka-network

    conduktor-console:
      image: conduktor/conduktor-console:1.33.0
      container_name: conduktor
      ports:
        - "8080:8080"
      volumes:
        - conduktor_data:/var/conduktor
      environment:
        CDK_DATABASE_URL: "postgresql://conduktor:change_me@postgresql:5432/conduktor-console"
        CDK_KAFKASQL_DATABASE_URL: "postgresql://conduktor:change_me@postgresql-sql:5432/conduktor-sql"
        CDK_ORGANIZATION_NAME: "getting-started"
        CDK_CLUSTERS_0_ID: "meu-kafka"
        CDK_CLUSTERS_0_NAME: "meu-kafka"
        CDK_CLUSTERS_0_BOOTSTRAPSERVERS: "kafka:9092"
        CDK_CLUSTERS_0_COLOR: "#6A57C8"
        CDK_CLUSTERS_0_ICON: "kafka"
      depends_on:
        kafka:
          condition: service_started
        postgresql:
          condition: service_healthy
        postgresql-2:
          condition: service_healthy
      networks:
        - kafka-network

volumes:
    mongodb_data:
    pg_data: {}
    pg_data_sql: {}
    conduktor_data: {}

networks:
  kafka-network:
    driver: bridge